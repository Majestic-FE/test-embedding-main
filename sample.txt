Slide #1: 
今回の題材 シーケンス図 

Slide #2: 
モチベーション

Slide #3: 
モチベーション
READMEを書くことになった
CHIYODA案件でGitHubの導入があるのが起因
その中で、シーケンス図を描きたいケースがあった
できれば、Miroなどのツールを使わず書きたい
複雑になると時間がかかる
保守も大変になりそう

Slide #4: 
AIツールに
Mermaid記法で
シーケンス図を作ってもらおう

Slide #5: 
検証ツール

Slide #6: 
検証ツール
GitHub Copilot
GitHub Copilot Chat
ChatGPT
GPT3.5 turbo
GPT4

Slide #7: 
検証

Slide #8: 
先に
ChatGPT(GPT3.5 turbo)荒いプロンプトを投げてみる

Slide #9: 
プロンプト

Slide #10: 
Q：ECサイトのログイン処理のシーケンス図を表現して

Slide #11: 
結果
中々行けている・成功している
一般的な処理を適切でかつ簡潔な流れを表現できている。
ログイン処理のシーケンス図はよく目にするので、できて当たり前なのかもしれない
残念だった部分
User部分はActorで表現して欲しかった

Slide #12: 
自分が実現したいシーケンス図を表現してもらう

Slide #13: 
実現したいシーケンス図

Slide #14: 
プロンプト
ChatGPT, GitHub Copilot Chat

Slide #15: 
No.1：ChatGPT (GPT3.5 turbo)

Slide #16: 
No.2：ChatGPT (GPT4)

Slide #17: 
No.3：GitHub Copilot Chat

Slide #18: 
まとめ
GPT3.5 turbo
手直しが必要そうなコードで返却
そもそも要件とずれている
根本が間違えていたのは痛い、、
ただ、処理は間違えていないので惜しいところである
GPT4
要件は満たしている
処理の粒度が細かすぎる印象
逆にシーケンス図として分かりにくい気がする
GitHub Copilot Chat
要件は満たしている
他に比べ処理の粒度が荒いのでもうちょっと処理を増やしてほしかった。
処理は間違えていないが、処理を表す矢印が適切ではない。

Slide #19: 
まとめ
どのChatも完全に条件に合った回答は来ず
サーバーへのデプロイするときはGitHub Actionsを使用します部分が抜けていた。
基本的にただデプロイする動作なので、省略したと予想。
アクター(人物)を指定しても、意味がなかった。
結論
業務で使用するとなると、GitHub Copilot Chatな気がする。
GitHub CopilotがMarkdownに対応している。
Mermaidなどコードを書くときには、github Copilot Chatを使う。

Slide #20: 
所感

Slide #21: 
AIツールと一緒に学習するのは効果抜群
今回初めてMermaid記法でシーケンス図を作成したが、学習スピードが向上した気がする。
様々なケースがあるから、それぞれで違いがありそれが勉強になった。
新しく技術(言語)を覚える時などに応用ができそう。
イメージ
言語の書き方・ルールを覚える
AIツールとペアプロ